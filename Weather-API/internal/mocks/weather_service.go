// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/bianavic/fullcycle_desafios/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// WeatherService is an autogenerated mock type for the WeatherService type
type WeatherService struct {
	mock.Mock
}

type WeatherService_Expecter struct {
	mock *mock.Mock
}

func (_m *WeatherService) EXPECT() *WeatherService_Expecter {
	return &WeatherService_Expecter{mock: &_m.Mock}
}

// GetWeatherByCity provides a mock function with given fields: city
func (_m *WeatherService) GetWeatherByCity(city string) (*domain.WeatherAPIResponse, error) {
	ret := _m.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherByCity")
	}

	var r0 *domain.WeatherAPIResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.WeatherAPIResponse, error)); ok {
		return rf(city)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.WeatherAPIResponse); ok {
		r0 = rf(city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WeatherAPIResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WeatherService_GetWeatherByCity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeatherByCity'
type WeatherService_GetWeatherByCity_Call struct {
	*mock.Call
}

// GetWeatherByCity is a helper method to define mock.On call
//   - city string
func (_e *WeatherService_Expecter) GetWeatherByCity(city interface{}) *WeatherService_GetWeatherByCity_Call {
	return &WeatherService_GetWeatherByCity_Call{Call: _e.mock.On("GetWeatherByCity", city)}
}

func (_c *WeatherService_GetWeatherByCity_Call) Run(run func(city string)) *WeatherService_GetWeatherByCity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WeatherService_GetWeatherByCity_Call) Return(_a0 *domain.WeatherAPIResponse, _a1 error) *WeatherService_GetWeatherByCity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WeatherService_GetWeatherByCity_Call) RunAndReturn(run func(string) (*domain.WeatherAPIResponse, error)) *WeatherService_GetWeatherByCity_Call {
	_c.Call.Return(run)
	return _c
}

// NewWeatherService creates a new instance of WeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherService {
	mock := &WeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
