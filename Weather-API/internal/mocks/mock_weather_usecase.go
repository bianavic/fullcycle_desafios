// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// WeatherUseCase is an autogenerated mock type for the WeatherUseCase type
type WeatherUseCase struct {
	mock.Mock
}

type WeatherUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *WeatherUseCase) EXPECT() *WeatherUseCase_Expecter {
	return &WeatherUseCase_Expecter{mock: &_m.Mock}
}

// GetWeatherByCEP provides a mock function with given fields: cep
func (_m *WeatherUseCase) GetWeatherByCEP(cep string) (map[string]float64, error) {
	ret := _m.Called(cep)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherByCEP")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]float64, error)); ok {
		return rf(cep)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]float64); ok {
		r0 = rf(cep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WeatherUseCase_GetWeatherByCEP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeatherByCEP'
type WeatherUseCase_GetWeatherByCEP_Call struct {
	*mock.Call
}

// GetWeatherByCEP is a helper method to define mock.On call
//   - cep string
func (_e *WeatherUseCase_Expecter) GetWeatherByCEP(cep interface{}) *WeatherUseCase_GetWeatherByCEP_Call {
	return &WeatherUseCase_GetWeatherByCEP_Call{Call: _e.mock.On("GetWeatherByCEP", cep)}
}

func (_c *WeatherUseCase_GetWeatherByCEP_Call) Run(run func(cep string)) *WeatherUseCase_GetWeatherByCEP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WeatherUseCase_GetWeatherByCEP_Call) Return(_a0 map[string]float64, _a1 error) *WeatherUseCase_GetWeatherByCEP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WeatherUseCase_GetWeatherByCEP_Call) RunAndReturn(run func(string) (map[string]float64, error)) *WeatherUseCase_GetWeatherByCEP_Call {
	_c.Call.Return(run)
	return _c
}

// NewWeatherUseCase creates a new instance of WeatherUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherUseCase {
	mock := &WeatherUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
