// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/bianavic/fullcycle_desafios/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// LocationService is an autogenerated mock type for the LocationService type
type LocationService struct {
	mock.Mock
}

type LocationService_Expecter struct {
	mock *mock.Mock
}

func (_m *LocationService) EXPECT() *LocationService_Expecter {
	return &LocationService_Expecter{mock: &_m.Mock}
}

// GetLocationByCEP provides a mock function with given fields: cep
func (_m *LocationService) GetLocationByCEP(cep string) (*domain.ViaCEPResponse, error) {
	ret := _m.Called(cep)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationByCEP")
	}

	var r0 *domain.ViaCEPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.ViaCEPResponse, error)); ok {
		return rf(cep)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.ViaCEPResponse); ok {
		r0 = rf(cep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ViaCEPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocationService_GetLocationByCEP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationByCEP'
type LocationService_GetLocationByCEP_Call struct {
	*mock.Call
}

// GetLocationByCEP is a helper method to define mock.On call
//   - cep string
func (_e *LocationService_Expecter) GetLocationByCEP(cep interface{}) *LocationService_GetLocationByCEP_Call {
	return &LocationService_GetLocationByCEP_Call{Call: _e.mock.On("GetLocationByCEP", cep)}
}

func (_c *LocationService_GetLocationByCEP_Call) Run(run func(cep string)) *LocationService_GetLocationByCEP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LocationService_GetLocationByCEP_Call) Return(_a0 *domain.ViaCEPResponse, _a1 error) *LocationService_GetLocationByCEP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LocationService_GetLocationByCEP_Call) RunAndReturn(run func(string) (*domain.ViaCEPResponse, error)) *LocationService_GetLocationByCEP_Call {
	_c.Call.Return(run)
	return _c
}

// NewLocationService creates a new instance of LocationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocationService {
	mock := &LocationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
