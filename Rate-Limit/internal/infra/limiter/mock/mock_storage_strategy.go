// Code generated by MockGen. DO NOT EDIT.
// Source: storage_strategy.go

// Package mock_limiter is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageStrategy is a mock of StorageStrategy interface.
type MockStorageStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStorageStrategyMockRecorder
}

// MockStorageStrategyMockRecorder is the mock recorder for MockStorageStrategy.
type MockStorageStrategyMockRecorder struct {
	mock *MockStorageStrategy
}

// NewMockStorageStrategy creates a new mock instance.
func NewMockStorageStrategy(ctrl *gomock.Controller) *MockStorageStrategy {
	mock := &MockStorageStrategy{ctrl: ctrl}
	mock.recorder = &MockStorageStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageStrategy) EXPECT() *MockStorageStrategyMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorageStrategy) Get(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageStrategyMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageStrategy)(nil).Get), ctx, key)
}

// Increment mocks base method.
func (m *MockStorageStrategy) Increment(ctx context.Context, key string, expiration time.Duration) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", ctx, key, expiration)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockStorageStrategyMockRecorder) Increment(ctx, key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockStorageStrategy)(nil).Increment), ctx, key, expiration)
}

// Set mocks base method.
func (m *MockStorageStrategy) Set(ctx context.Context, key string, value int, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStorageStrategyMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageStrategy)(nil).Set), ctx, key, value, expiration)
}
